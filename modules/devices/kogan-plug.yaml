---
packages:
  common: !include common.yaml

status_led:
  pin:
    number: GPIO13
    inverted: true

binary_sensor:
  - platform: gpio
    name: '${friendly_name} Button'
    pin:
      number: 0
      inverted: true
      mode: INPUT_PULLUP
    on_multi_click:
      - timing:  # double click
          - ON for at most 1s
          - OFF for at most 0.5s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - homeassistant.event:
              event: esphome.plug_button
              data:
                switch: $devicename
                action: double_click
      - timing:  # long click
          - ON for 1s to 2s
          - OFF for at least 0.5s
        then:
          - homeassistant.event:
              event: esphome.plug_button
              data:
                switch: $devicename
                action: long_click
      - timing:  # really long click
          - ON for at least 5s
        then:
          - homeassistant.event:
              event: esphome.plug_button
              data:
                switch: $devicename
                action: really_long_click
      - timing:  # short click
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - switch.toggle: relay
          - homeassistant.event:
              event: esphome.plug_button
              data:
                switch: $devicename
                action: click
      - timing:  # four clicks
          - ON for at most 1s
          - OFF for at most 0.5s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - button.press: restart_button

switch:
  - platform: gpio
    id: relay
    pin: GPIO14
    name: '${friendly_name} Relay'
    restore_mode: ${restore_mode}

sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO4
    cf1_pin: GPIO5
    voltage:
      name: '${friendly_name} Voltage'
      id: voltage_id
      filters:
        - heartbeat: 10s
      on_value:
        - component.update: apparent_power_id
        - component.update: reactive_power_id
        - component.update: power_factor_id
    current:
      name: '${friendly_name} Current'
      id: current_id
      filters:
        - heartbeat: 10s
      on_value:
        - component.update: apparent_power_id
        - component.update: reactive_power_id
        - component.update: power_factor_id
    power:
      name: '${friendly_name} Power'
      id: power_id
      filters:
        - heartbeat: 10s
      on_value:
        - component.update: reactive_power_id
        - component.update: power_factor_id
    energy:
      name: '${friendly_name} Energy'
      id: energy_id
      unit_of_measurement: kWh
      filters:
        - multiply: 0.001
        - heartbeat: 10s
    update_interval: 1s
    change_mode_every: 4
    voltage_divider: $voltage_divider  # Lower value gives lower voltage readout
    current_resistor: $current_resistor  # Higher value gives lower watt readout

  - platform: template
    name: '${friendly_name} Apparent Power'
    id: apparent_power_id
    update_interval: never
    unit_of_measurement: VA
    lambda: return id(voltage_id).state * id(current_id).state;

  - platform: template
    name: '${friendly_name} Reactive Power'
    id: reactive_power_id
    update_interval: never
    unit_of_measurement: VAR
    lambda: |
      float active = id(power_id).state;
      float apparent = id(apparent_power_id).state;
      if (apparent > active) {
          return sqrt(apparent * apparent - active * active);
      } else {
          return 0;
      }

  - platform: template
    name: '${friendly_name} Power Factor'
    id: power_factor_id
    update_interval: never
    lambda: |
      float active = id(power_id).state;
      float apparent = id(apparent_power_id).state;
      if (active > apparent) return 1;
      if (apparent == 0) return 0;
      return active / apparent;
